// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    field int maxLength,length; 
    field Array charArr;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int stringLength) {
        if (stringLength > 0) {
            let charArr = Array.new(stringLength);
        }
        let maxLength = stringLength;
        let length = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        if (maxLength > 0) {
            do charArr.dispose();
        }
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return charArr[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let charArr[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        var int i;
        var Array newArr;

        if (length > (maxLength - 1)) {
            // Creates a new array with double the length
            let newArr = Array.new(maxLength + maxLength);

            let i = 0;
            while (i < length) {
                let newArr[i] = charArr[i];
                let i = i + 1;
            }

            do charArr.dispose();
            let charArr = newArr;
            let maxLength = maxLength + maxLength;
        }

        let charArr[length] = c;
        let length = length + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let length = length - 1;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int d, i, val;
        var bool is_negative;
        let val = 0;
        
        let is_negative = false;

        while (i < length()) {
            if (charAt(i) = 45) {
                let is_negative = true;
            }
            else {
                let d = charAt(i) - 48;
                let val = val * 10 + d;
            }
            let i = i + 1;
        }
        
        if (is_negative) {
            return -val;
        }
        return val;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        // Clear the current string
        let length = 0;
        
        if (val < 0) {
            let val = Math.abs(val);
            do appendChar(45);
        }
        
        do helpSetInt(val);
        return;
    }

    method void helpSetInt(int val) {
        var int i, c;

        let c = val - ((val / 10) * 10);

        if (val < 10) {
            do appendChar(c + 48);
        }
        else {
            do helpSetInt(val / 10);
            do appendChar(c + 48);
        }
        return;
    }


    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
