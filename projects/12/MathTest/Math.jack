// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static Array twoToThe;

    /** Initializes the library. */
    function void init() {
        var int i, j, value;

        let twoToThe = Array.new(16);

        let value = 1;
        while (i < 16) {
            let twoToThe[i] = value;
            let value = value + value;
            let i = i + 1;
        }
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) {
            return -x;
        }
        return x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum, shiftedx, i;
        let sum = 0;
        let shiftedx = x;
        let i = 0;
        
        while (i < 16) {
            if (Math.bit(y, i)) {
                let sum = sum + shiftedx;
            }
            let shiftedx = shiftedx + shiftedx;
            let i = i + 1;
        }
        return sum;
    }

    /** Returns the i-th bit of x */
    function bool bit(int x, int i) {
        return ~((twoToThe[i] & x) = 0);
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int q, neg_x, neg_y, result;
        let neg_x = 0;
        let neg_y = 0;

        if (x < 0) {
            let x = Math.abs(x);
            let neg_x = -1;
        }
        if (y < 0) {
            let y = Math.abs(y);
            let neg_y = -1;
        }
        
        if (y > x) {
            return 0;
        }
        let q = Math.divide(x, y + y);

        if ((x - (2 * q * y)) < y) {
            let result = q + q;
        }
        else {
            let result = q + q + 1;
        }
        
        if (neg_x = neg_y) {
            return result;
        }
        else {
            return -result;
        }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y, j, approx_root, approx_square;
        let y = 0;
        let j = 7;

        while (j > -1) {
            let approx_root = y + twoToThe[j];
            let approx_square = approx_root * approx_root;
                        
            if (
                ((approx_square < x) | (approx_square = x)) 
                & (approx_square > -1)
            ) {
                let y = approx_root;
            }
            
            let j = j - 1;
        }
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a > b) {
            return a;
        }
        return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a < b) {
            return a;
        }
        return b;
    }

}