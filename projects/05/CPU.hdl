// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    Not(in=instruction[15], out=Ainstruction);
    Not(in=Ainstruction, out=Cinstruction);

    // Instruction decoding:
    // In the case of an a instruction, we use the a-bit (i.e., the MSB) to tell us that we're loading stuff into the A register
    Mux16(a=aluoutput, b=instruction, sel=Ainstruction, out=armuxout);

    // We should write into the A register when: either 1) an a instruction is received or b) the correct destination bit is set (instruction[10])
    Or(a=Ainstruction, b=instruction[5], out=loada);
    ARegister(in=armuxout, load=loada, out=arout, out[0..14]=addressM);
    
    // Populate the DRegister
    And(a=Cinstruction, b=instruction[4], out=loadd);
    DRegister(in=aluoutput, load=loadd, out=drout);

    // Load either the ARegister or inM into the ALU
    Mux16(a=arout, b=inM, sel=instruction[12], out=amchoiceout);
    ALU(x=drout, y=amchoiceout, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=aluoutput, out=outM, zr=zr, ng=ng);

    // Set program counter. Program counter should just continue with default behaviour, except for cases where the JMP bits align with the zr and ng values
    // currently defaulted inc to true; this might be incorrect

    // So basically, we have the 3 jump bits, and we need to determine whether, combined with the zr and ng bits, the condition is true.
    // The first, second and third jump bits indicate whether to jump depending on whether the value is negative, zero, or positive respectively; i.e., if j[2] and x<0, jump; if j[0] and x>0, jump
    // The simplest approach is to explicitly make all the comparisons: (j[2] and ng) or (j[1] and zr) or (j[1] and not(ng or zero)

    And(a=instruction[2], b=ng, out=ngstatus);
    And(a=instruction[1], b=zr, out=zrstatus);
    Or(a=ng, b=zr, out=ngzr);
    Not(in=ngzr, out=notngzr);
    And(a=instruction[0], b=notngzr, out=posstatus);
    Or(a=ngstatus, b=zrstatus, out=ngorzrstatus);
    Or(a=ngorzrstatus, b=posstatus, out=tojump);
    // Check that we're not looking at an A instruction
    And(a=tojump, b=Cinstruction, out=jmp);

    PC(in=arout, load=jmp, inc=true, reset=reset, out[0..14]=pc);

    // writeM is based off the write to M bit; i can just and it with itself; also not an AInstruction (i.e., instruction[15] == 1)
    And(a=instruction[15], b=instruction[3], out=writeM);

}
